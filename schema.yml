openapi: 3.0.3
info:
  title: Foodie Project API
  version: 1.0.0
  description: A food delivery api for frontend engineers
paths:
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token/verify/:
    post:
      operationId: api_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/signup/:
    post:
      operationId: auth_signup_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreation'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreation'
          description: ''
  /store/order/{order_id}/:
    get:
      operationId: store_order_retrieve
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      tags:
      - store
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: store_order_update
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      tags:
      - store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    delete:
      operationId: store_order_destroy
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      tags:
      - store
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /store/orders/:
    get:
      operationId: store_orders_retrieve
      tags:
      - store
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: store_orders_create
      tags:
      - store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /store/update-status/{order_id}/:
    put:
      operationId: store_update_status_update
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      tags:
      - store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusUpdate'
          description: ''
  /store/user/{user_id}/order/{order_id}/:
    get:
      operationId: store_user_order_retrieve
      parameters:
      - in: path
        name: order_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - store
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /store/user/{user_id}/orders:
    get:
      operationId: store_user_orders_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - store
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
components:
  schemas:
    Order:
      type: object
      properties:
        size:
          type: string
          maxLength: 25
        quantity:
          type: integer
        flavour:
          type: string
          maxLength: 40
      required:
      - flavour
      - quantity
      - size
    OrderStatusUpdate:
      type: object
      properties:
        order_status:
          type: string
          maxLength: 25
      required:
      - order_status
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - email
      - password
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UserCreation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 40
        email:
          type: string
          format: email
          maxLength: 80
        phone_number:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - email
      - id
      - password
      - phone_number
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
